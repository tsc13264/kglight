from . import BaseAgent
from common.registry import Registry
import gym
from generator import LaneVehicleGenerator, IntersectionPhaseGenerator, IntersectionVehicleGenerator
import random
import numpy as np
from collections import deque
import torch


@Registry.register_model('rl')
class RLAgent(BaseAgent):
    '''
    RLAgent Class is mainly used for creating a rl-based agent and base methods.
    '''
    def __init__(self, world, rank):
        super().__init__(world)
        self.rank = rank
        self.id = self.world.intersection_ids[self.rank]
        self.inter_id = self.world.intersection_ids[self.rank]
        self.inter_obj = self.world.id2intersection[self.inter_id]
        self.action_space = gym.spaces.Discrete(len(self.inter_obj.phases))
        self.buffer_size = Registry.mapping['trainer_mapping']['setting'].param['buffer_size']
        self.replay_buffer = deque(maxlen=self.buffer_size)
        self.device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
        self._reset_generator()
        if self.phase:
            if self.one_hot:
                self.ob_length = self.ob_generator.ob_length + len(self.world.id2intersection[self.inter_id].phases)
            else:
                self.ob_length = self.ob_generator.ob_length + 1
        else:
            self.ob_length = self.ob_generator.ob_length
        self.phase_length = len(self.inter_obj.phases) if self.one_hot else 1

    def _reset_generator(self):
        self.ob_generator = LaneVehicleGenerator(self.world, self.inter_obj, self.ob_list, in_only=True, average=None)
        self.phase_generator = IntersectionPhaseGenerator(self.world, self.inter_obj, ['phase'], targets=['cur_phase'], negative=False)
        self.reward_generator = LaneVehicleGenerator(self.world, self.inter_obj, self.reward_list, in_only=True, average="all", negative=True)
        self.queue = LaneVehicleGenerator(self.world, self.inter_obj, ["lane_waiting_count"], in_only=True, negative=False)
        # self.delay = LaneVehicleGenerator(self.world, self.inter_obj, ["lane_delay"], in_only=True, average="all", negative=False)
        
    def reset(self):
        self.inter_id = self.world.intersection_ids[self.rank]
        self.inter_obj = self.world.id2intersection[self.inter_id]
        self._reset_generator()
        
    def get_ob(self):
        '''
        get_ob
        Get observation from environment.

        :param: None
        :return: observation generated by ob_generator
        '''
        return self.ob_generator.generate()

    def get_phase(self):
        '''
        get_phase
        Get current phase of intersection(s) from environment.

        :param: None
        :return: current phase generated by phase_generator
        '''
        return self.phase_generator.generate()

    def get_reward(self):
        '''
        get_reward
        Get reward from environment.

        :param: None
        :return: reward generated by reward_generator
        '''
        reward = self.reward_generator.generate()
        assert len(reward) == 1
        return reward[0]

    def get_action(self):
        '''
        get_action
        Generate action.

        :param: None
        :return: action generated by sample function
        '''
        return self.action_space.sample()
    
    def sample(self):
        '''
        sample
        Sample action randomly.

        :param: None
        :return: action generated randomly.
        '''
        return random.randint(0,self.action_space.n-1)

    def get_queue(self):
        '''
        get_queue
        Get queue length of intersection.

        :param: None
        :return: total queue length
        '''
        queue = []
        queue.append(self.queue.generate())
        # sum of lane nums
        queue = np.sum(np.squeeze(np.array(queue)))
        return queue

    def get_delay(self):
        '''
        get_delay
        Get delay of intersection.

        :param: None
        :return: total delay
        '''
        delay = []
        delay.append(self.delay.generate())
        delay = np.sum(np.squeeze(np.array(delay)))
        return delay
    
    """
    def choose(self, **kwargs):
        raise NotImplementedError
    """

